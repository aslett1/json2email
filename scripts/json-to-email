#!/usr/bin/env python

import json
import jinja2
import os
import smtplib
import sys

from argparse import ArgumentParser, ArgumentError, FileType

def check_and_get_plaintext_template_path(parser, file_handle):
  if file_handle == None:
    parser.error("Must provide a jinja2 template for email output")
  filename = file_handle.name
  return os.path.abspath(filename)

def check_and_get_data(parser, filename):
  try:
    if filename == '-':
      data = json.load(sys.stdin)
    else:
      path = os.path.abspath(filename)
      os.path.isfile(path)
      with open(path, 'r') as json_data:
        data = json.load(json_data)
  except Exception as exception_details:
    message = """Could not load data from {filename}.  More details below:
{exception_details}""".format(filename=filename, exception_details=exception_details)
    parser.error(message)
  return data

def get_template(template_path):
  template_loader = jinja2.FileSystemLoader(searchpath='/')
  template_env = jinja2.Environment(loader=template_loader)
  return template_env.get_template(template_path)

if __name__ == '__main__':
  parser = ArgumentParser(description="Takes a jinja2 template and some json and sends an email")

  parser.add_argument('--plain', '-p', type=FileType('r'),
                      help='Template with plain text template for email')

  parser.add_argument('--subject', '-s', type=str,
                     help='Subject line for email')

  parser.add_argument('--to', '-t', nargs='*', type=str,
                      help='To: recipient of email')

  parser.add_argument('json', type=str,
                      help="Json formated data file (use '-' for stdin)")

  args = parser.parse_args()

  plaintext_template_path = check_and_get_plaintext_template_path(parser, args.plain)
  plaintext_template = get_template(plaintest_template_path)

  data = check_and_get_data(parser, args.json)

  output = plaintext_template.render(data)
  print output
